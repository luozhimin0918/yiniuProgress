package com.jyh.kxt.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jyh.kxt.main.json.flash.FlashJson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FLASH_BEAN".
*/
public class FlashJsonDao extends AbstractDao<FlashJson, Void> {

    public static final String TABLENAME = "FLASH_BEAN";

    /**
     * Properties of entity FlashJson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, String.class, "uid", false, "UID");
        public final static Property Socre = new Property(1, String.class, "socre", false, "SOCRE");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property IsColloct = new Property(4, boolean.class, "isColloct", false, "IS_COLLOCT");
        public final static Property IsShowMore = new Property(5, boolean.class, "isShowMore", false, "IS_SHOW_MORE");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property IsSel = new Property(7, boolean.class, "isSel", false, "IS_SEL");
        public final static Property DataType = new Property(8, int.class, "dataType", false, "DATA_TYPE");
    }


    public FlashJsonDao(DaoConfig config) {
        super(config);
    }
    
    public FlashJsonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FLASH_BEAN\" (" + //
                "\"UID\" TEXT," + // 0: uid
                "\"SOCRE\" TEXT," + // 1: socre
                "\"CODE\" TEXT," + // 2: code
                "\"CONTENT\" TEXT," + // 3: content
                "\"IS_COLLOCT\" INTEGER NOT NULL ," + // 4: isColloct
                "\"IS_SHOW_MORE\" INTEGER NOT NULL ," + // 5: isShowMore
                "\"TIME\" TEXT," + // 6: time
                "\"IS_SEL\" INTEGER NOT NULL ," + // 7: isSel
                "\"DATA_TYPE\" INTEGER NOT NULL );"); // 8: dataType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FLASH_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FlashJson entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String socre = entity.getSocre();
        if (socre != null) {
            stmt.bindString(2, socre);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindLong(5, entity.getIsColloct() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsShowMore() ? 1L: 0L);
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
        stmt.bindLong(8, entity.getIsSel() ? 1L: 0L);
        stmt.bindLong(9, entity.getDataType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FlashJson entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String socre = entity.getSocre();
        if (socre != null) {
            stmt.bindString(2, socre);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindLong(5, entity.getIsColloct() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsShowMore() ? 1L: 0L);
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
        stmt.bindLong(8, entity.getIsSel() ? 1L: 0L);
        stmt.bindLong(9, entity.getDataType());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FlashJson readEntity(Cursor cursor, int offset) {
        FlashJson entity = new FlashJson( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // socre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.getShort(offset + 4) != 0, // isColloct
            cursor.getShort(offset + 5) != 0, // isShowMore
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time
            cursor.getShort(offset + 7) != 0, // isSel
            cursor.getInt(offset + 8) // dataType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FlashJson entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSocre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsColloct(cursor.getShort(offset + 4) != 0);
        entity.setIsShowMore(cursor.getShort(offset + 5) != 0);
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsSel(cursor.getShort(offset + 7) != 0);
        entity.setDataType(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FlashJson entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FlashJson entity) {
        return null;
    }

    @Override
    public boolean hasKey(FlashJson entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
