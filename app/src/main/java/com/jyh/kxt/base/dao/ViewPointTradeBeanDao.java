package com.jyh.kxt.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jyh.kxt.trading.json.ShareDictBean;
import com.jyh.kxt.trading.json.ViewPointTradeBean;
import java.util.List;

import com.jyh.kxt.trading.json.ViewPointTradeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POINT_BEAN".
*/
public class ViewPointTradeBeanDao extends AbstractDao<ViewPointTradeBean, Void> {

    public static final String TABLENAME = "POINT_BEAN";

    /**
     * Properties of entity ViewPointTradeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Content = new Property(0, String.class, "content", false, "CONTENT");
        public final static Property Num_good = new Property(1, int.class, "num_good", false, "NUM_GOOD");
        public final static Property Num_comment = new Property(2, int.class, "num_comment", false, "NUM_COMMENT");
        public final static Property Author_name = new Property(3, String.class, "author_name", false, "AUTHOR_NAME");
        public final static Property Author_id = new Property(4, String.class, "author_id", false, "AUTHOR_ID");
        public final static Property Author_img = new Property(5, String.class, "author_img", false, "AUTHOR_IMG");
        public final static Property Time = new Property(6, long.class, "time", false, "TIME");
        public final static Property Href = new Property(7, String.class, "href", false, "HREF");
        public final static Property ShareDict = new Property(8, String.class, "shareDict", false, "SHARE_DICT");
        public final static Property O_id = new Property(9, String.class, "o_id", false, "O_ID");
        public final static Property O_class = new Property(10, String.class, "o_class", false, "O_CLASS");
        public final static Property O_action = new Property(11, String.class, "o_action", false, "O_ACTION");
        public final static Property Is_top = new Property(12, String.class, "is_top", false, "IS_TOP");
        public final static Property Report = new Property(13, String.class, "report", false, "REPORT");
        public final static Property Picture = new Property(14, String.class, "picture", false, "PICTURE");
        public final static Property Forward = new Property(15, String.class, "forward", false, "FORWARD");
        public final static Property Is_follow = new Property(16, String.class, "is_follow", false, "IS_FOLLOW");
    }

    private final ShareDictConverter shareDictConverter = new ShareDictConverter();
    private final ListConverter reportConverter = new ListConverter();
    private final ListConverter pictureConverter = new ListConverter();
    private final ViewPointConverter forwardConverter = new ViewPointConverter();

    public ViewPointTradeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ViewPointTradeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POINT_BEAN\" (" + //
                "\"CONTENT\" TEXT," + // 0: content
                "\"NUM_GOOD\" INTEGER NOT NULL ," + // 1: num_good
                "\"NUM_COMMENT\" INTEGER NOT NULL ," + // 2: num_comment
                "\"AUTHOR_NAME\" TEXT," + // 3: author_name
                "\"AUTHOR_ID\" TEXT," + // 4: author_id
                "\"AUTHOR_IMG\" TEXT," + // 5: author_img
                "\"TIME\" INTEGER NOT NULL ," + // 6: time
                "\"HREF\" TEXT," + // 7: href
                "\"SHARE_DICT\" TEXT," + // 8: shareDict
                "\"O_ID\" TEXT UNIQUE ," + // 9: o_id
                "\"O_CLASS\" TEXT," + // 10: o_class
                "\"O_ACTION\" TEXT," + // 11: o_action
                "\"IS_TOP\" TEXT," + // 12: is_top
                "\"REPORT\" TEXT," + // 13: report
                "\"PICTURE\" TEXT," + // 14: picture
                "\"FORWARD\" TEXT," + // 15: forward
                "\"IS_FOLLOW\" TEXT);"); // 16: is_follow
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POINT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ViewPointTradeBean entity) {
        stmt.clearBindings();
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(1, content);
        }
        stmt.bindLong(2, entity.getNum_good());
        stmt.bindLong(3, entity.getNum_comment());
 
        String author_name = entity.getAuthor_name();
        if (author_name != null) {
            stmt.bindString(4, author_name);
        }
 
        String author_id = entity.getAuthor_id();
        if (author_id != null) {
            stmt.bindString(5, author_id);
        }
 
        String author_img = entity.getAuthor_img();
        if (author_img != null) {
            stmt.bindString(6, author_img);
        }
        stmt.bindLong(7, entity.getTime());
 
        String href = entity.getHref();
        if (href != null) {
            stmt.bindString(8, href);
        }
 
        ShareDictBean shareDict = entity.getShareDict();
        if (shareDict != null) {
            stmt.bindString(9, shareDictConverter.convertToDatabaseValue(shareDict));
        }
 
        String o_id = entity.getO_id();
        if (o_id != null) {
            stmt.bindString(10, o_id);
        }
 
        String o_class = entity.getO_class();
        if (o_class != null) {
            stmt.bindString(11, o_class);
        }
 
        String o_action = entity.getO_action();
        if (o_action != null) {
            stmt.bindString(12, o_action);
        }
 
        String is_top = entity.getIs_top();
        if (is_top != null) {
            stmt.bindString(13, is_top);
        }
 
        List report = entity.getReport();
        if (report != null) {
            stmt.bindString(14, reportConverter.convertToDatabaseValue(report));
        }
 
        List picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(15, pictureConverter.convertToDatabaseValue(picture));
        }
 
        ViewPointTradeBean forward = entity.getForward();
        if (forward != null) {
            stmt.bindString(16, forwardConverter.convertToDatabaseValue(forward));
        }
 
        String is_follow = entity.getIs_follow();
        if (is_follow != null) {
            stmt.bindString(17, is_follow);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ViewPointTradeBean entity) {
        stmt.clearBindings();
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(1, content);
        }
        stmt.bindLong(2, entity.getNum_good());
        stmt.bindLong(3, entity.getNum_comment());
 
        String author_name = entity.getAuthor_name();
        if (author_name != null) {
            stmt.bindString(4, author_name);
        }
 
        String author_id = entity.getAuthor_id();
        if (author_id != null) {
            stmt.bindString(5, author_id);
        }
 
        String author_img = entity.getAuthor_img();
        if (author_img != null) {
            stmt.bindString(6, author_img);
        }
        stmt.bindLong(7, entity.getTime());
 
        String href = entity.getHref();
        if (href != null) {
            stmt.bindString(8, href);
        }
 
        ShareDictBean shareDict = entity.getShareDict();
        if (shareDict != null) {
            stmt.bindString(9, shareDictConverter.convertToDatabaseValue(shareDict));
        }
 
        String o_id = entity.getO_id();
        if (o_id != null) {
            stmt.bindString(10, o_id);
        }
 
        String o_class = entity.getO_class();
        if (o_class != null) {
            stmt.bindString(11, o_class);
        }
 
        String o_action = entity.getO_action();
        if (o_action != null) {
            stmt.bindString(12, o_action);
        }
 
        String is_top = entity.getIs_top();
        if (is_top != null) {
            stmt.bindString(13, is_top);
        }
 
        List report = entity.getReport();
        if (report != null) {
            stmt.bindString(14, reportConverter.convertToDatabaseValue(report));
        }
 
        List picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(15, pictureConverter.convertToDatabaseValue(picture));
        }
 
        ViewPointTradeBean forward = entity.getForward();
        if (forward != null) {
            stmt.bindString(16, forwardConverter.convertToDatabaseValue(forward));
        }
 
        String is_follow = entity.getIs_follow();
        if (is_follow != null) {
            stmt.bindString(17, is_follow);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ViewPointTradeBean readEntity(Cursor cursor, int offset) {
        ViewPointTradeBean entity = new ViewPointTradeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // content
            cursor.getInt(offset + 1), // num_good
            cursor.getInt(offset + 2), // num_comment
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // author_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // author_img
            cursor.getLong(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // href
            cursor.isNull(offset + 8) ? null : shareDictConverter.convertToEntityProperty(cursor.getString(offset + 8)), // shareDict
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // o_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // o_class
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // o_action
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // is_top
            cursor.isNull(offset + 13) ? null : reportConverter.convertToEntityProperty(cursor.getString(offset + 13)), // report
            cursor.isNull(offset + 14) ? null : pictureConverter.convertToEntityProperty(cursor.getString(offset + 14)), // picture
            cursor.isNull(offset + 15) ? null : forwardConverter.convertToEntityProperty(cursor.getString(offset + 15)), // forward
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // is_follow
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ViewPointTradeBean entity, int offset) {
        entity.setContent(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNum_good(cursor.getInt(offset + 1));
        entity.setNum_comment(cursor.getInt(offset + 2));
        entity.setAuthor_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthor_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthor_img(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.getLong(offset + 6));
        entity.setHref(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShareDict(cursor.isNull(offset + 8) ? null : shareDictConverter.convertToEntityProperty(cursor.getString(offset + 8)));
        entity.setO_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setO_class(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setO_action(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIs_top(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setReport(cursor.isNull(offset + 13) ? null : reportConverter.convertToEntityProperty(cursor.getString(offset + 13)));
        entity.setPicture(cursor.isNull(offset + 14) ? null : pictureConverter.convertToEntityProperty(cursor.getString(offset + 14)));
        entity.setForward(cursor.isNull(offset + 15) ? null : forwardConverter.convertToEntityProperty(cursor.getString(offset + 15)));
        entity.setIs_follow(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ViewPointTradeBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ViewPointTradeBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(ViewPointTradeBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
