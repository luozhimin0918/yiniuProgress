package com.jyh.kxt.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jyh.kxt.av.json.VideoListJson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_BEAN".
*/
public class VideoListJsonDao extends AbstractDao<VideoListJson, Void> {

    public static final String TABLENAME = "VIDEO_BEAN";

    /**
     * Properties of entity VideoListJson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, String.class, "uid", false, "UID");
        public final static Property Category_id = new Property(1, String.class, "category_id", false, "CATEGORY_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Picture = new Property(3, String.class, "picture", false, "PICTURE");
        public final static Property Num_comment = new Property(4, String.class, "num_comment", false, "NUM_COMMENT");
        public final static Property Num_good = new Property(5, String.class, "num_good", false, "NUM_GOOD");
        public final static Property Num_play = new Property(6, String.class, "num_play", false, "NUM_PLAY");
        public final static Property Create_time = new Property(7, String.class, "create_time", false, "CREATE_TIME");
        public final static Property IsCollect = new Property(8, boolean.class, "isCollect", false, "IS_COLLECT");
        public final static Property IsGood = new Property(9, boolean.class, "isGood", false, "IS_GOOD");
        public final static Property DataType = new Property(10, int.class, "dataType", false, "DATA_TYPE");
    }


    public VideoListJsonDao(DaoConfig config) {
        super(config);
    }
    
    public VideoListJsonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_BEAN\" (" + //
                "\"UID\" TEXT," + // 0: uid
                "\"CATEGORY_ID\" TEXT," + // 1: category_id
                "\"TITLE\" TEXT," + // 2: title
                "\"PICTURE\" TEXT," + // 3: picture
                "\"NUM_COMMENT\" TEXT," + // 4: num_comment
                "\"NUM_GOOD\" TEXT," + // 5: num_good
                "\"NUM_PLAY\" TEXT," + // 6: num_play
                "\"CREATE_TIME\" TEXT," + // 7: create_time
                "\"IS_COLLECT\" INTEGER NOT NULL ," + // 8: isCollect
                "\"IS_GOOD\" INTEGER NOT NULL ," + // 9: isGood
                "\"DATA_TYPE\" INTEGER NOT NULL );"); // 10: dataType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoListJson entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindString(2, category_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(4, picture);
        }
 
        String num_comment = entity.getNum_comment();
        if (num_comment != null) {
            stmt.bindString(5, num_comment);
        }
 
        String num_good = entity.getNum_good();
        if (num_good != null) {
            stmt.bindString(6, num_good);
        }
 
        String num_play = entity.getNum_play();
        if (num_play != null) {
            stmt.bindString(7, num_play);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(8, create_time);
        }
        stmt.bindLong(9, entity.getIsCollect() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsGood() ? 1L: 0L);
        stmt.bindLong(11, entity.getDataType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoListJson entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindString(2, category_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(4, picture);
        }
 
        String num_comment = entity.getNum_comment();
        if (num_comment != null) {
            stmt.bindString(5, num_comment);
        }
 
        String num_good = entity.getNum_good();
        if (num_good != null) {
            stmt.bindString(6, num_good);
        }
 
        String num_play = entity.getNum_play();
        if (num_play != null) {
            stmt.bindString(7, num_play);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(8, create_time);
        }
        stmt.bindLong(9, entity.getIsCollect() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsGood() ? 1L: 0L);
        stmt.bindLong(11, entity.getDataType());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public VideoListJson readEntity(Cursor cursor, int offset) {
        VideoListJson entity = new VideoListJson( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // category_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // picture
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // num_comment
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // num_good
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // num_play
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // create_time
            cursor.getShort(offset + 8) != 0, // isCollect
            cursor.getShort(offset + 9) != 0, // isGood
            cursor.getInt(offset + 10) // dataType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoListJson entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCategory_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPicture(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNum_comment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNum_good(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNum_play(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreate_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsCollect(cursor.getShort(offset + 8) != 0);
        entity.setIsGood(cursor.getShort(offset + 9) != 0);
        entity.setDataType(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(VideoListJson entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(VideoListJson entity) {
        return null;
    }

    @Override
    public boolean hasKey(VideoListJson entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
