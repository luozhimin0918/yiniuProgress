package com.jyh.kxt.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MARK_BEAN".
*/
public class MarkBeanDao extends AbstractDao<MarkBean, Void> {

    public static final String TABLENAME = "MARK_BEAN";

    /**
     * Properties of entity MarkBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", false, "USER_ID");
        public final static Property OId = new Property(1, String.class, "oId", false, "O_ID");
        public final static Property UpState = new Property(2, int.class, "upState", false, "UP_STATE");
        public final static Property CollectState = new Property(3, int.class, "collectState", false, "COLLECT_STATE");
        public final static Property AttentionState = new Property(4, int.class, "attentionState", false, "ATTENTION_STATE");
        public final static Property FavourState = new Property(5, int.class, "favourState", false, "FAVOUR_STATE");
    }


    public MarkBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MarkBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MARK_BEAN\" (" + //
                "\"USER_ID\" TEXT," + // 0: userId
                "\"O_ID\" TEXT UNIQUE ," + // 1: oId
                "\"UP_STATE\" INTEGER NOT NULL ," + // 2: upState
                "\"COLLECT_STATE\" INTEGER NOT NULL ," + // 3: collectState
                "\"ATTENTION_STATE\" INTEGER NOT NULL ," + // 4: attentionState
                "\"FAVOUR_STATE\" INTEGER NOT NULL );"); // 5: favourState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MARK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MarkBean entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String oId = entity.getOId();
        if (oId != null) {
            stmt.bindString(2, oId);
        }
        stmt.bindLong(3, entity.getUpState());
        stmt.bindLong(4, entity.getCollectState());
        stmt.bindLong(5, entity.getAttentionState());
        stmt.bindLong(6, entity.getFavourState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MarkBean entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String oId = entity.getOId();
        if (oId != null) {
            stmt.bindString(2, oId);
        }
        stmt.bindLong(3, entity.getUpState());
        stmt.bindLong(4, entity.getCollectState());
        stmt.bindLong(5, entity.getAttentionState());
        stmt.bindLong(6, entity.getFavourState());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MarkBean readEntity(Cursor cursor, int offset) {
        MarkBean entity = new MarkBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // oId
            cursor.getInt(offset + 2), // upState
            cursor.getInt(offset + 3), // collectState
            cursor.getInt(offset + 4), // attentionState
            cursor.getInt(offset + 5) // favourState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MarkBean entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpState(cursor.getInt(offset + 2));
        entity.setCollectState(cursor.getInt(offset + 3));
        entity.setAttentionState(cursor.getInt(offset + 4));
        entity.setFavourState(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MarkBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MarkBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(MarkBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
